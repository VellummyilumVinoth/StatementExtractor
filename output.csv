salaries,foreach var s in sv { io:println(s); }
msg,int[3] numbers = [1, 2, 3];
x,string[LENGTH] animals = ["cat", "dog", "mouse"];
y,int[] indexes = [1, 2];
s,string[*] colors = ["red", "green", "blue"];
numbers,string firstColor = colors[0];
animals,string[] names = ["Mike", "Amy", "Korina"];
indexes,int length = names.length();
colors,string secondPerson = names.remove(1);
firstColor,string[] fullNames = [];
names,foreach string name in names { fullNames.push(string `${name} Johnson`); }
length,function (int) returns int increment = x => x + 1;
secondPerson,function (int, int) returns int add = (x, y) => x + y;
fullNames,var incrementByTwo = function(int x) returns int => x + 2;
name,var subtract = function(int x, int y) returns int { return x - y; };
increment,boolean flag = true;
add,int x1 = 3;
incrementByTwo,int x2 = 2;
subtract,string name;
flag,int age;
x1,[name, age] = getDetails();
x2,[name, age] = getDetails();
name,int n = <int>x;
age,string s = x.toString();
name,float f = x is int|float ? <float>x : 0.0;
age,string[] list = ["foo", "bar"];
n,map<int> mapping = {x: 1, y: 2};
s,string listMember = list[0];
f,int? mapIndex = mapping["x"];
list,[int, string, boolean] tuple = [1, "John", true];
mapping,int firstTupleMember = tuple[0];
listMember,string secondTupleMember = tuple[1];
mapIndex,boolean thirdTupleMember = tuple[2];
tuple,[int, string, boolean...] openList = [1, "John"];
firstTupleMember,[int, string, boolean...] openList2 = [1, "John", true, false];
secondTupleMember,record {| int id; string name; boolean...; |} openRecord = {id: 1, name: "John"};
thirdTupleMember,record {| int id; string name; boolean...; |} openRecord2 = {id: 1, name: "John", "checked": true};
openList,foreach int i in 0...9 { if (i > 5) { break; } io:println(i); }
openList2,int i = 0;
openRecord,json j = {x: 1.0, y: 2.0};
openRecord2,json k = j.cloneReadOnly();
i,Coord c = <Coord> k;
i,int|error res = intFromBytes([104, 101, 108, 108, 111]);
j,MapArray arr = [ {"x": "foo"}, {"y": "bar"} ];
k,int count = getCount();
c,string[] countries = getCountryList();
res,Person person = {id: 123, fname: "Jhon", lname: "Doe"};
arr,Person {id: personId, fname: personFname, lname: personLname} = person;
count,Person {id: personId, fname: personFname, lname: personLname} = person;
countries,Person {id: personId, fname: personFname, lname: personLname} = person;
person,EvenNumberGenerator evenGen = new ();
personId,stream<int, error?> evenNumberStream = new (evenGen);
personFname,var evenNumber = evenNumberStream.next();
personLname,int[] nums = [1, 2, 3, 4];
evenGen,int[] numsTimes10 = from var num in nums select num * 10;
evenNumberStream,int[] numsTimes10 = from var num in nums select num * 10;
evenNumber,int[] evenNums = from int num in nums where num % 2 == 0 select num;
nums,int[] evenNums = from int num in nums where num % 2 == 0 select num;
numsTimes10,int[] numsReversed = from int num in nums order by num descending select i;
num,int[] numsReversed = from int num in nums order by num descending select i;
evenNums,string languageName = "Ballerina";
num,string newName = from var char in languageName select char + char;
numsReversed,string newName = from var char in languageName select char + char;
num,Name name1 = { firstName: "Rowan", lastName: "Atkinson" };
languageName,Name name2 = "Leslie Banks";
newName,string[] s1 = [y, y];
char,string str = check string
name1,string personName = "John Smith";
name2,float r = 0.0;
s1,foreach int i in 0 ..< v.length() { r += v[i]; }
,int i = 0;
