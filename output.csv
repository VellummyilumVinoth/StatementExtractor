salaries,type Person record { int id; string fname; string lname; }
LENGTH,type Coord record { float x; float y; }
MAX_VALUE,type StructuredName record { string firstName; string lastName; }
URL,type Name StructuredName|string
msg,type MapArray map<string>[]
x,foreach var s in sv { io:println(s); }
Person,int sum = x + y;
Coord,int[3] numbers = [1, 2, 3];
StructuredName,string[LENGTH] animals = ["cat", "dog", "mouse"];
Name,int[] indexes = [1, 2];
MapArray,string[*] colors = ["red", "green", "blue"];
y,string firstColor = colors[0];
s,string[] names = ["Mike", "Amy", "Korina"];
sum,int length = names.length();
numbers,string secondPerson = names.remove(1);
animals,string[] fullNames = [];
indexes,foreach string name in names { fullNames.push(string `${name} Johnson`); }
colors,function (int) returns int increment = x => x + 1;
firstColor,function (int, int) returns int add = (x, y) => x + y;
names,var incrementByTwo = function(int x) returns int => x + 2;
length,var subtract = function(int x, int y) returns int { return x - y; };
secondPerson,boolean flag = true;
fullNames,int x1 = 3;
name,int x2 = 2;
increment,string name;
add,int age;
incrementByTwo,[name, age] = getDetails();
subtract,[name, age] = getDetails();
flag,int n = <int>x;
x1,string s = x.toString();
x2,float f = x is int|float ? <float>x : 0.0;
name,string[] list = ["foo", "bar"];
age,map<int> mapping = {x: 1, y: 2};
name,string listMember = list[0];
age,int? mapIndex = mapping["x"];
n,[int, string, boolean] tuple = [1, "John", true];
s,int firstTupleMember = tuple[0];
f,string secondTupleMember = tuple[1];
list,boolean thirdTupleMember = tuple[2];
mapping,[int, string, boolean...] openList = [1, "John"];
listMember,[int, string, boolean...] openList2 = [1, "John", true, false];
mapIndex,record {| int id; string name; boolean...; |} openRecord = {id: 1, name: "John"};
tuple,record {| int id; string name; boolean...; |} openRecord2 = {id: 1, name: "John", "checked": true};
firstTupleMember,foreach int i in 0...9 { if (i > 5) { break; } io:println(i); }
secondTupleMember,int i = 0;
thirdTupleMember,json j = {x: 1.0, y: 2.0};
openList,json k = j.cloneReadOnly();
openList2,Coord c = <Coord> k;
openRecord,int|error res = intFromBytes([104, 101, 108, 108, 111]);
openRecord2,MapArray arr = [ {"x": "foo"}, {"y": "bar"} ];
i,int count = getCount();
i,string[] countries = getCountryList();
j,Person person = {id: 123, fname: "Jhon", lname: "Doe"};
k,Person {id: personId, fname: personFname, lname: personLname} = person;
c,Person {id: personId, fname: personFname, lname: personLname} = person;
res,Person {id: personId, fname: personFname, lname: personLname} = person;
arr,int sum = add(5, 11);
count,EvenNumberGenerator evenGen = new ();
countries,stream<int, error?> evenNumberStream = new (evenGen);
person,var evenNumber = evenNumberStream.next();
personId,int[] nums = [1, 2, 3, 4];
personFname,int[] numsTimes10 = from var num in nums select num * 10;
personLname,int[] numsTimes10 = from var num in nums select num * 10;
sum,int[] evenNums = from int num in nums where num % 2 == 0 select num;
evenGen,int[] evenNums = from int num in nums where num % 2 == 0 select num;
evenNumberStream,int[] numsReversed = from int num in nums order by num descending select i;
evenNumber,int[] numsReversed = from int num in nums order by num descending select i;
nums,string languageName = "Ballerina";
numsTimes10,string newName = from var char in languageName select char + char;
num,string newName = from var char in languageName select char + char;
evenNums,Name name1 = { firstName: "Rowan", lastName: "Atkinson" };
num,Name name2 = "Leslie Banks";
numsReversed,string[] s1 = [y, y];
num,Engineer engineer = new Engineer("Alice");
languageName,string engineerName = engineer.getName();
newName,string str = check string
char,type PersonArray Person[]
name1,type Building record {| readonly string buildingCode; string city; string state; string country; string postalCode; Workspace[] workspaces; |}
name2,type Workspace record {| readonly string workspaceId; string workspaceType; Building location; Employee employee; |}
s1,type Employee record {| readonly int id; string firstName; string lastName; int salary; |}
engineer,string personName = "John Smith";
engineerName,float r = 0.0;
,foreach int i in 0 ..< v.length() { r += v[i]; }
str,int i = 0;
