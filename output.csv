numbers,int[3] numbers = [1, 2, 3];
animals,string[LENGTH] animals = ["cat", "dog", "mouse"];
indexes,int[] indexes = [1, 2];
colors,string[*] colors = ["red", "green", "blue"];
firstColor,string firstColor = colors[0];
names,string[] names = ["Mike", "Amy", "Korina"];
length,int length = names.length();
secondPerson,string secondPerson = names.remove(1);
fullNames,string[] fullNames = [];
name,foreach string name in names { fullNames.push(string `${name} Johnson`); }
increment,function (int) returns int increment = x => x + 1;
add,function (int, int) returns int add = (x, y) => x + y;
incrementByTwo,var incrementByTwo = function(int x) returns int => x + 2;
subtract,var subtract = function(int x, int y) returns int { return x - y; };
flag,boolean flag = true;
x1,int x1 = 3;
x2,int x2 = 2;
name,string name;
age,int age;
name,[name, age] = getDetails();
age,[name, age] = getDetails();
n,int n = <int>x;
s,string s = x.toString();
f,float f = x is int|float ? <float>x : 0.0;
list,string[] list = ["foo", "bar"];
mapping,map<int> mapping = {x: 1, y: 2};
listMember,string listMember = list[0];
mapIndex,int? mapIndex = mapping["x"];
tuple,[int, string, boolean] tuple = [1, "John", true];
firstTupleMember,int firstTupleMember = tuple[0];
secondTupleMember,string secondTupleMember = tuple[1];
thirdTupleMember,boolean thirdTupleMember = tuple[2];
openList,[int, string, boolean...] openList = [1, "John"];
openList2,[int, string, boolean...] openList2 = [1, "John", true, false];
openRecord,record {| int id; string name; boolean...; |} openRecord = {id: 1, name: "John"};
openRecord2,record {| int id; string name; boolean...; |} openRecord2 = {id: 1, name: "John", "checked": true};
i,foreach int i in 0...9 { if (i > 5) { break; } io:println(i); }
i,int i = 0;
j,json j = {x: 1.0, y: 2.0};
k,json k = j.cloneReadOnly();
c,Coord c = <Coord> k;
res,int|error res = intFromBytes([104, 101, 108, 108, 111]);
arr,MapArray arr = [ {"x": "foo"}, {"y": "bar"} ];
count,int count = getCount();
countries,string[] countries = getCountryList();
person,Person person = {id: 123, fname: "Jhon", lname: "Doe"};
personId,Person {id: personId, fname: personFname, lname: personLname} = person;
personFname,Person {id: personId, fname: personFname, lname: personLname} = person;
personLname,Person {id: personId, fname: personFname, lname: personLname} = person;
evenGen,EvenNumberGenerator evenGen = new ();
evenNumberStream,stream<int, error?> evenNumberStream = new (evenGen);
evenNumber,var evenNumber = evenNumberStream.next();
nums,int[] nums = [1, 2, 3, 4];
numsTimes10,int[] numsTimes10 = from var num in nums select num * 10;
num,int[] numsTimes10 = from var num in nums select num * 10;
evenNums,int[] evenNums = from int num in nums where num % 2 == 0 select num;
num,int[] evenNums = from int num in nums where num % 2 == 0 select num;
numsReversed,int[] numsReversed = from int num in nums order by num descending select i;
num,int[] numsReversed = from int num in nums order by num descending select i;
languageName,string languageName = "Ballerina";
newName,string newName = from var char in languageName select char + char;
char,string newName = from var char in languageName select char + char;
name1,Name name1 = { firstName: "Rowan", lastName: "Atkinson" };
name2,Name name2 = "Leslie Banks";
s1,string[] s1 = [y, y];
,string str = check string
str,string personName = "John Smith";
personName,float r = 0.0;
r,foreach int i in 0 ..< v.length() { r += v[i]; }
i,int i = 0;
